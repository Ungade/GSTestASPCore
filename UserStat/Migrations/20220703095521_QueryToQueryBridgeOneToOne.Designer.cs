// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserStat.Models;

namespace UserStat.Migrations
{
    [DbContext(typeof(UserQueryContext))]
    [Migration("20220703095521_QueryToQueryBridgeOneToOne")]
    partial class QueryToQueryBridgeOneToOne
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("UserStat.Models.QueriesBridge", b =>
                {
                    b.Property<long>("QueriesBridgeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("QueryId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UserQueryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("queryCreateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("QueriesBridgeId");

                    b.HasIndex("QueryId")
                        .IsUnique();

                    b.ToTable("QueriesBridges");
                });

            modelBuilder.Entity("UserStat.Models.Query", b =>
                {
                    b.Property<long>("QueryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Percent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QueryGuid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("QueryId");

                    b.ToTable("Queries");
                });

            modelBuilder.Entity("UserStat.Models.QueryResult", b =>
                {
                    b.Property<long>("QueryResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("Count_sign_in")
                        .HasColumnType("INTEGER");

                    b.Property<long>("QueryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("QueryResultId");

                    b.HasIndex("QueryId")
                        .IsUnique();

                    b.ToTable("QueryResult");
                });

            modelBuilder.Entity("UserStat.Models.UserQuery", b =>
                {
                    b.Property<long>("UserQueryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserQueryId");

                    b.ToTable("UserQueries");
                });

            modelBuilder.Entity("UserStat.Models.QueriesBridge", b =>
                {
                    b.HasOne("UserStat.Models.Query", "Query")
                        .WithOne("QueriesBridge")
                        .HasForeignKey("UserStat.Models.QueriesBridge", "QueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Query");
                });

            modelBuilder.Entity("UserStat.Models.QueryResult", b =>
                {
                    b.HasOne("UserStat.Models.Query", "Query")
                        .WithOne("QueryResult")
                        .HasForeignKey("UserStat.Models.QueryResult", "QueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Query");
                });

            modelBuilder.Entity("UserStat.Models.Query", b =>
                {
                    b.Navigation("QueriesBridge");

                    b.Navigation("QueryResult");
                });
#pragma warning restore 612, 618
        }
    }
}
